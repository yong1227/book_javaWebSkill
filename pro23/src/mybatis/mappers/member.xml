<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- member.xml의 네임스페이스를 지정합니다. -->
<mapper namespace="mapper.member">
	<!--  
	<resultMap id="memResult" type="memberVO">
		<result property="id" column="id" />
        <result property="pwd" column="pwd" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="joinDate" column="joinDate" />
	</resultMap> 
	-->
	
	<!-- SQL문을 실행한 후 반환되는 레코드들을 type에 설정합니다. -->
	<!-- 조회한 레코드를 지정한 컬럼 이름을 key, 값을 value로 해서 저장합니다. -->
	<!-- 레코드의 컬럼 이름에 대해 memberVo와 같은 속성에 값을 설정합니다. -->	
	<resultMap id="memResult" type="java.util.HashMap">
      <result property="id" column="id" />
      <result property="pwd" column="pwd" />
      <result property="name" column="name" />
      <result property="email" column="email" />
      <result property="joinDate" column="joinDate" />
   </resultMap>

	<!-- DAO에서 id를 이용해 해당 SQL문을 호출합니다. -->
	<!-- 반환되는 레코드를 memResult에 저장합니다. -->
	<!-- 조회한 회원 정보를 HashMap에 저장합니다. -->
	<select id="selectAllMemberList" resultMap="memResult">
      <![CDATA[
         select * from t_member	order by joinDate desc	 	
      ]]>
	</select>

	<!-- MemberDao -->
	<select id="selectName" resultType="String">
    <![CDATA[
	select name from t_member
	where id = 'hong'			
    ]]>
	</select>
	
	<select id="selectPwd" resultType="int" >
	  <![CDATA[ 
	    select pwd from t_member 
	    where id = 'hong'
	 ]]>
	 </select> 
	 
	 <!-- MemberDAO에서 호출하는 id를 저장합니다. -->
	 <!-- 조회되는 한 개의 레코드를 memberVO에 저장합니다. -->
	 <!-- MemberDAO에서 SQL문 호출 시 전달되는 매개변수의 데이터 타입을 지정합니다. -->
	<select id="selectMemberById" resultType="memberVO"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         id=#{id}			
      ]]>
      <!-- MemberDAO에서 메서드를 호출하면서 parameterType으로 전달된 매개변수 이름을 
      		select문의 id의 조건 값으로 사용합니다. -->
	 </select>	
	
	<select id="selectMemberByPwd" resultMap="memResult"  parameterType="int" >
      <![CDATA[
         select * from t_member
         where
         pwd = #{pwd}			
      ]]>
      <!-- SQL문 실행 시 매개변수 이름을 pwd의 조건 값으로 사용합니다. -->
    </select>
    
    <!-- MemberDAO에서 회원 정보를 memberVO의 속성에 저장해서 넘깁니다. -->
     <insert id="insertMember"  parameterType="memberVO">
		<![CDATA[
		 insert into t_member(id,pwd, name, email)
		 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
		<!-- memberVO의 속성 이름에 저장된 값을 value로 설정합니다. -->
	</insert>
	
	<insert id="insertMember2"  parameterType="java.util.Map">
		<![CDATA[
			 insert into t_member(id,pwd, name, email)
			 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
   </insert>
   
   <update id="updateMember"  parameterType="memberVO">
     <![CDATA[
	     update t_member
	     set pwd=#{pwd}, name=#{name}, email=#{email}
	     where
	     id=#{id}
      ]]>      
      <!-- id값을 조건 값으로 사용합니다. -->
   </update> 
     
     <!-- 회원 ID는 문자열이므로 parameterType을 String으로 설정합니다. -->
   <delete id="deleteMember"  parameterType="String">
	<![CDATA[
	   delete from  t_member
	   where
	   id=#{id}
	]]>      
	<!-- id를 조건값으로 삭제합니다. -->
  </delete>
	
 	
	<!-- 동적 SQL문 --> 
<!-- 
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
      <![CDATA[
          select * from t_member
      ]]>
      <where>
         <if test=" name != ''  and  name != null">
            name=#{name}
         </if>
         <if test="email != ''  and email != null ">
           and email = #{email}
         </if>
      </where>
      order by joinDate desc
  </select> 
 -->
 
 <!-- <sql> 태그를 이용해 공통 SQL문의 refid를 a로 지정합니다. -->
   <sql id="a">
    <![CDATA[
      select * from t_member
     ]]> 
   </sql> 
  

  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
  	   <!-- <include> 태그를 이용해 공통 SQL문을 재사용 합니다. -->
	   <include refid="a" /> 
	<!--     <![CDATA[
         select * from t_member 
      ]]>
	 -->
       <where>
		  <choose>
		   	  <!-- name과 email 속성 값 모두 있는 경우 -->
		      <when test="name != '' and name != null and  email != '' and email != null">
			     name=#{name} and email=#{email}
		      </when>
		      <when test="name != '' and name != null">
			     name = #{name}
		      </when>
		      <when test="email !='' and email != null">
			    email = #{email}
		      </when>
	      </choose>
       </where>
       order by joinDate desc
   </select> 
   
   <!-- SQL문에 List 인스턴스나 배열을 전달하면 자동으로 Map에 전달되어 이름을 키(key)로 사용합니다.
   		List인스턴스는 list를 키로 사용하고 배열은 array를 키로 사용합니다. -->
   <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map">
      <include refid="a" />
      <!-- 
      <![CDATA[
        select * from t_member 
          
      ]]>
       -->
      where name in
      <!-- foreach문을 이용해 반복해서 list의 값을 표시합니다. -->
      <foreach item="item" collection="list" open="(" separator="," close=")" >
         #{item}
      </foreach>
      order by joinDate desc
   </select>
   
   <insert id="foreachInsert"  parameterType="java.util.Map">
   	  <!-- foreach태그로 반복 작업을 할 때는 처음에  INSERT ALL을 추가합니다 / 반복 작업이 끝난 후 SELECT * FROM ALL을 마지막에 추가합니다.-->
      <foreach item="item"  collection="list"   open="INSERT ALL" separator=" " close="SELECT * FROM DUAL" >
          INTO  t_member(id, pwd, name, email)
          VALUES  (#{item.id},
                    #{item.pwd},
                    #{item.name},
                    #{item.email})
      </foreach>
   </insert>
      
   <!-- 
    <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%'#{name}'%'		
      ]]>
    </select>
     -->
   <!--  like 검색 -->
   <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
    </select>
</mapper>